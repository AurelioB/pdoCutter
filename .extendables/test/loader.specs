__modules__ = {};
load_modules(['./test/fixtures/core-packages']);

describe('Extendables module loader', function () {	
	it('can determine the difference between a valid module and other files/folders', function () {
		// currently also registers empty modules, but that's pretty harmless.
		expect("package-b" in __modules__).toEqual(true);
		expect("nonpackage-b" in __modules__).toEqual(false);
	});
	it('can fetch test specs from modules', function () {
		expect(__modules__["package-b"].get_tests().length).toEqual(1);
		expect(__modules__["package-b"].get_tests()[0].absoluteURI.endswith("testspecs.specs")).toEqual(true);
	});
	it('can handle submodule files', function () {
		expect(require("package-b/real").this_is).toEqual('Package B submodule');
	});
	it('can handle submodule directories', function () { 
		expect(require("package-b/subpackage").this_is).toEqual('Package B sub-submodule');
	});
	// see fixtures
	it('provides a context for each module containing an exports object, \
	the module id and module uri', function () {
		var b = __modules__["package-b"].load().exports;
		expect(b.id).toEqual("index");
		expect(b.uri.contains("package-b")).toEqual(true);
	});
	it('is entirely CommonJS-compliant', function () {
		// our .id implementation is currently incorrect
		var b = __modules__["package-b"].load().exports;
		expect(b.id).toEqual("package-b");
	});
	it('has a require function that works according to the CommonJS specs', function () {
		var b = require("package-b");
		expect(b.this_is).toEqual('Package B core');
	});
	it('has an extract function that can extract a module into the global namespace', function () {
		extract("package-b/real");
		expect(this_is).toBeDefined();
	});
});